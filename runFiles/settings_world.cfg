% WORLD
  debug = 0                                  #(bool) run world in debug mode (if available)
  worldType = BlockCatch                     #(string) world to be used, [BlockCatch, NBack, PathFollow]

% WORLD_BLOCKCATCH
  paddle = 110011                            #(string) list of 1 (for sensor) and 0 (for non-sensor) used to define the paddle
  patternStartPositions = ALL                #(string) Where should the patters start (and if random, how many times should each pattern be tested)
                                             #  ALL = each pattern will be tested for each possible start position
                                             #  ALL_CLEAR = each pattern will be tested for each possible start position that does not overlap the paddle
                                             #  RANDOM_X = each pattern will be tested X times, starting from a random location (locations may repeat)
                                             #  RANDOM_CLEAR_X = each pattern will be tested X times, starting from a random location that does not overlap the paddle
                                             #  note: with either random method, locations may repeat)
  patternsToCatch = 1L,1R                    #(string) a comma separted list of block patterns to be caught
                                             #  each pattern is followed by a list of at least one L, R or, H. These letters will determine
                                             #  movement (left, right, hold). for example, 101LLRH = pattern 3 wide with a hole in the middle
                                             #  which moves left, left, right, no movement, left, left, right, hold...
                                             #  the letters L and R may be followed by a number, this will allow the pattern to move more faster.
                                             #  patterns may be defined with : to allow for animated patterns (i.e. 10:01L will define a pattern
                                             #  that ossilates between 10 and 01 while moving left.
  patternsToMiss = 11L,11R                   #(string) a comma separted list of block pattern sizes to be missed (see blockPatternsToCatch)
  scoreMethod = ANY_ANY                      #(string) How should score be calculated?
                                             #  ANY_ANY - a hit is defined as any part of the pattern contacting at part of the paddle
                                             #  VISIBLE_ANY - a hit is defined as any visible part of the pattern contacting any part of the paddle
                                             #  VISIBLE_SENSOR - a hit is defined as any visible part of the pattern contacting any sensor on the paddle
                                             #  SUM_ALL_ALL - a hit will be recorded for each part of the pattern that contacts any part of the paddle
                                             #  SUM_VISIBLE_SENSOR - a hit will be recorded for each visible part of the pattern that contacts a sensor on the paddle
                                             #  SUM_VISIBLE_NON_SENSOR - a hit will be recorded for each visible part of the pattern that contacts a non-sensor on
                                             #  the paddle.
                                             #  NOTE: correct and incorrect are calculated diffrently if any of the SUM methods are used, see the README file!
  startYMax = 20                             #(int) highest height patterns can start
  startYMin = 20                             #(int) lowest height patterns can start
  testMutants = 0                            #(int) if > 0, this number of mutants of each agent will be tested
  visualizeBest = -1                         #(int) visualize best scoring organism every visualizeBest generations, excluding generation 0.
                                             #  if -1, do not visualize on steps (this parameter does not effect visualize mode)
  worldXMax = 20                             #(int) max width of world
  worldXMin = 20                             #(int) min width of world

% WORLD_BLOCKCATCH_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  save_R_FragMatrix = 0                      #(bool) 

% WORLD_BLOCKCATCH_NAMES
  brainName = root::                         #(string) name of brains used to control organisms
  groupName = root::                         #(string) name of group to be evaluated

% WORLD_NBACK
  NsList = 1,2,3:100|2,3,4:-1                #(string) comma seperated list of n values followed by ':' and a time
                                             #  more then one list can be defined seperated by '|'. The last list time must be -1 (i.e. forever)
                                             #  eg: 1,2,3:100|2,3,4:-1
  RMult = 1                                  #(int) score R multiplier
  brainNameSpace = root::                    #(string) namespace for parameters used to define brain
  delayOutputEval = 0                        #(int) generation delay for ouput evalutation
  evaluationsPerGeneration = 10              #(int) Number of times to evaluate each agent per generation
  groupNameSpace = root::                    #(string) namespace of group to be evaluated
  scoreMult = 1                              #(int) score multiplier
  testMutants = 0                            #(int) if > 0, this number of mutants of each agent will be tested
  testsPerEvaluation = 10                    #(int) Number of times to test each agent per evaluation
  tritInputs = 0                             #(bool) if false (defaut) then inputs to brain are 0 or 1. If true, inputs are -1,0,1

% WORLD_NBACK_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  saveStates = 1                             #(bool) 
  save_R_FragMatrix = 0                      #(bool) 

% WORLD_PATHFOLLOW
  addFlippedMaps = 1                         #(bool) if addFlippedMaps, than a copy of each loaded map flipped horizontaly will be added to the maps list
  clearVisted = 1                            #(bool) if clearVisted is true, then world markers will be erased when a location is occupied and visting this location
                                             #  again will incure the emptySpace cost.
                                             #  note that map values > 1, i.e. turn signals and end of map signal are set to 1 (forward signal) when visted to provide
                                             #  time to take a turn action.
  emptySpaceCost = 0.25                      #(double) score lost anytime agent is on an empty location (including non-empty locations that become empty)
  evaluationsPerGeneration = 1               #(int) how many times should each organism be tested in each generation? (useful for non-deterministic brains)
  extraSteps = 50                            #(int) how many many steps, beyond those needed to perfectly solve the map, does the agent get to solve each map?
  inputMode = single                         #(string) how are inputs delived from world to organism?
                                             #  single: 1 input : -1 (off), 0(forward), or [1, signValueMax](turn symbol)
                                             #  mixed:  4 inputs: offPathBit,onPathBit,(0(not turn), or [1,signValueMax](turn symbol))
                                             #  binary: 3+ inputs: offPathBit,onPathBit,onTurnBit, bits for turn symbol(0 if not turn)
  mapNames = ../code/World/PathFollowWorld/path1.txt,../code/World/PathFollowWorld/path2.txt #(string) list of text files with paths. in path files, X = start position,
                                             #  0 = empty, 1 = forward path, 2 = turn right, 3 = turn right, 4 = end of path
  randomTurnSymbols = -1                     #(int) if 1, random symbols pairs will be determined per map (and per eval) for left and right.
                                             #  symbols will be the same for all agents in a generation.
                                             #  if 0, symbolValueMax is ignored and 1 and 2  (or 01 and 10) are always used
                                             #  if -1 all possible symbols pairs will be used per map (and per eval) for left and right
  swapSymbolsAfter = 1.0                     #(double) if swapSignals < 1.0, than the turn symbols will be swapped after (minimum number of steps * swapSignalsAfter)
  turnSymbolsCount = 2                       #(int) number of symbols that will be used when generating turn symbols.
                                             #  if inputMode is binary it is best if this value is a power of 2

% WORLD_PATHFOLLOW_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  saveStates = 1                             #(bool) 
  saveVisual = 1                             #(bool) save visualization, even though we are in analyze mode
  save_R_FragMatrix = 0                      #(bool) 

